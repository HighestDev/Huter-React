{"ast":null,"code":"import * as types from './actionTypes';\nimport { auth } from '../firebase';\nimport { toast } from 'react-toastify';\n\nconst registerStart = () => ({\n  type: types.REGISTER_START\n});\n\nconst registerSuccess = user => ({\n  type: types.REGISTER_SUCCESS,\n  payload: user\n});\n\nconst registerFail = error => ({\n  type: types.REGISTER_FAIL,\n  payload: error\n});\n\nconst loginStart = () => ({\n  type: types.LOGIN_START\n});\n\nconst loginSuccess = user => ({\n  type: types.LOGIN_SUCCESS,\n  payload: user\n});\n\nconst loginFail = error => ({\n  type: types.LOGIN_FAIL,\n  payload: error\n});\n\nconst logoutStart = () => ({\n  type: types.LOGOUT_START\n});\n\nconst logoutSuccess = () => ({\n  type: types.LOGOUT_SUCCESS\n});\n\nconst logoutFail = error => ({\n  type: types.LOGOUT_FAIL,\n  payload: error\n});\n\nconst forgotPasswordStart = () => ({\n  type: types.FORGOT_PASSWORD_START\n});\n\nconst passwordResetSuccess = () => ({\n  type: types.FORGOT_PASSWORD_SUCCESS\n});\n\nconst passwordResetFail = error => ({\n  type: types.FORGOT_PASSWORD_FAIL,\n  payload: error\n});\n\nexport const SET_USER = user => ({\n  type: types.SET_USER,\n  payload: user\n});\n_c = SET_USER;\nexport const registerInitiate = (email, password, displayName) => {\n  return function (dispatch) {\n    dispatch(registerStart());\n    auth.createUserWithEmailAndPassword(email, password).then(_ref => {\n      let {\n        user\n      } = _ref;\n      user.updateProfile({\n        displayName\n      });\n      dispatch(registerSuccess(user));\n    }).catch(error => {\n      dispatch(passwordResetFail(error.message));\n      toast.error(error.message);\n    });\n  };\n};\nexport const loginInitiate = (email, password) => {\n  return function (dispatch) {\n    dispatch(loginStart());\n    auth.signInWithEmailAndPassword(email, password).then(_ref2 => {\n      let {\n        user\n      } = _ref2;\n      dispatch(loginSuccess(user));\n    }).catch(error => {\n      dispatch(passwordResetFail(error.message));\n      toast.error(error.message);\n    }).catch(error => dispatch(loginFail(error.message)));\n  };\n};\nexport const logoutInitiate = () => {\n  return function (dispatch) {\n    dispatch(logoutStart());\n    auth.signOut().then(res => dispatch(logoutSuccess())).catch(error => {\n      dispatch(passwordResetFail(error.message));\n      toast.error(error.message);\n    }).catch(error => {\n      dispatch(logoutFail(error.message));\n      toast.error(error.message);\n    });\n  };\n};\nexport const resetPasswordInitiate = email => {\n  return function (dispatch) {\n    dispatch(forgotPasswordStart());\n    auth.sendPasswordResetEmail(email).then(() => {\n      toast.success('Check your mail to reset password!(Check spam to see your email)');\n    }).catch(error => {\n      dispatch(passwordResetFail(error.message));\n      toast.error(error.message);\n    });\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SET_USER\");","map":{"version":3,"names":["types","auth","toast","registerStart","type","REGISTER_START","registerSuccess","user","REGISTER_SUCCESS","payload","registerFail","error","REGISTER_FAIL","loginStart","LOGIN_START","loginSuccess","LOGIN_SUCCESS","loginFail","LOGIN_FAIL","logoutStart","LOGOUT_START","logoutSuccess","LOGOUT_SUCCESS","logoutFail","LOGOUT_FAIL","forgotPasswordStart","FORGOT_PASSWORD_START","passwordResetSuccess","FORGOT_PASSWORD_SUCCESS","passwordResetFail","FORGOT_PASSWORD_FAIL","SET_USER","registerInitiate","email","password","displayName","dispatch","createUserWithEmailAndPassword","then","updateProfile","catch","message","loginInitiate","signInWithEmailAndPassword","logoutInitiate","signOut","res","resetPasswordInitiate","sendPasswordResetEmail","success"],"sources":["/home/highest/Documents/React-Hunter/src/redux/action.js"],"sourcesContent":["import * as types from './actionTypes';\nimport {auth} from '../firebase';\nimport {toast} from 'react-toastify';\n\n\nconst registerStart=()=>({\n    type:types.REGISTER_START\n});\n\nconst registerSuccess=(user)=>({\n    type:types.REGISTER_SUCCESS,\n    payload:user,\n});\n\n\nconst registerFail=(error)=>({\n    type:types.REGISTER_FAIL,\n    payload:error,\n});\n\n\n\nconst loginStart=()=>({\n    type:types.LOGIN_START\n});\n\n\nconst loginSuccess=(user)=>({\n    type:types.LOGIN_SUCCESS,\n    payload:user,\n});\n\n\nconst loginFail=(error)=>({\n    type:types.LOGIN_FAIL,\n    payload:error,\n});\n\n\nconst logoutStart=()=>({\n    type:types.LOGOUT_START\n});\n\nconst logoutSuccess=()=>({\n    type:types.LOGOUT_SUCCESS\n});\n\n\nconst logoutFail=(error)=>({\n    type:types.LOGOUT_FAIL,\n    payload:error\n})\n\n\n\nconst forgotPasswordStart=()=>({\n    type:types.FORGOT_PASSWORD_START\n});\n\nconst passwordResetSuccess=()=>({\n    type:types.FORGOT_PASSWORD_SUCCESS,\n   \n});\n\nconst passwordResetFail=(error)=>({\n    type:types.FORGOT_PASSWORD_FAIL,\n    payload:error\n})\n\n\nexport const SET_USER=(user)=>({\n    type:types.SET_USER,\n    payload:user\n});\n\n\n\n\nexport const registerInitiate=(email,password,displayName)=>{\n   return function(dispatch){\n    dispatch(registerStart());\n    auth.createUserWithEmailAndPassword(email,password).then(({user})=>{\n        user.updateProfile({\n            displayName\n        })\n        dispatch(registerSuccess(user))\n    }).catch((error)=>{dispatch(passwordResetFail(error.message));toast.error(error.message)})\n   }\n}\n\n\nexport const loginInitiate=(email,password)=>{\n    return function(dispatch){\n     dispatch(loginStart());\n     auth\n     .signInWithEmailAndPassword(email,password)\n     .then(({user})=>{\n  \n         dispatch(loginSuccess(user))\n     })\n     .catch((error)=>{dispatch(passwordResetFail(error.message));toast.error(error.message)}).catch((error)=>dispatch(loginFail(error.message)))\n    }\n }\n\n\n\n\n\nexport const logoutInitiate=()=>{\n    return function(dispatch){\n     dispatch(logoutStart());\n     auth\n     .signOut()\n     .then((res)=>\n  \n         dispatch(logoutSuccess())\n     )\n     .catch((error)=>{dispatch(passwordResetFail(error.message));toast.error(error.message)}).catch((error)=>{dispatch(logoutFail(error.message));toast.error(error.message)})\n    }\n }\n\n\n export const resetPasswordInitiate=(email)=>{\n    return function(dispatch){\n        dispatch(forgotPasswordStart());\n        auth.sendPasswordResetEmail(email)\n        .then(()=>{\n            toast.success('Check your mail to reset password!(Check spam to see your email)')\n        }).catch((error)=>{dispatch(passwordResetFail(error.message));toast.error(error.message)})\n    }\n }"],"mappings":"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"},"metadata":{},"sourceType":"module"}